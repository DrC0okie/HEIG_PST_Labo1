abline(h=4, lty=2)
# Ajout des bâtonnets pour le groupe A
rug(note.A, side=2)
# Ajout des bâtonnets pour le groupe B
rug(note.B, side=4)
result <- by(examen$note, examen$groupe, sd)
print(paste("Ecart type groupe A:", round(result['A'], 3)))
print(paste("Ecart type groupe B:", round(result['B'], 3)))
data("AdultUCI")
dframe<-AdultUCI[, c("education", "hours-per-week")]
colnames(dframe)<-c("education", "hours_per_week")
str(dframe)
ggplot(dframe, aes(x=hours_per_week, y=education)) +
geom_point(colour="lightblue", alpha=0.1, position="jitter") +
geom_boxplot(outlier.size=0, alpha=0.2)
dim(AdultUCI)
nrows<-nrow(AdultUCI)
n.missing<-rowSums(is.na(AdultUCI))
sum(n.missing>0)/nrows
library(arules)
library(ggplot2)
cpus <- scan("data/cpus.txt")
examen <- read.table("data/examen.txt", header = TRUE)
cpus
examen
cpus[12]
cpus[3:19]
cpus[cpus>190]
examen$note
examen$note[7]
mesdonnees<-c(2.9, 3.4, 3.4, 3.7, 3.7, 2.8, 2.1, 2.5, 2.6)
mesdonnees
couleurs<-c("bleu", "vert", "blanc", "noir", "jaune")
couleurs
mesdonnees[-c(3:5)]
ls()
stem(cpus)
par(mfrow=c(1,2), pty="s")
hist(cpus, xlab="performance relative", ylab="fréquence", main="",
col="darkslategray4")
boxplot(cpus, xlab="performance relative", col="darkslategray4", horizontal=T)
rug(cpus)
par(mfrow=c(1,1))
# Calcul de la médiane
performance_mediane <- median(cpus)
print(paste("Performance relative médiane:", performance_mediane))
# Calcul de la moyenne
performance_moyenne <- mean(cpus)
print(paste("Performance relative moyenne:", performance_moyenne))
n.cpus<-table(cpus)
as.numeric(names(n.cpus)[n.cpus==max(n.cpus)])
summary(cpus)
ecart_type_complet <- sd(cpus)
print(paste("Ecart type complet:", ecart_type_complet))
bp_stats <- boxplot(cpus, plot=FALSE)
atypiques <- bp_stats$out
print("Valeurs atypiques:")
atypiques
cpus_sans_atypiques <- cpus[!cpus %in% atypiques]
print(paste("Ecart type sans valeurs atypiques:", sd(cpus_sans_atypiques)))
lblue<-"#528B8B"
par(pty="s")
boxplot(note~groupe, data=examen, ylim=c(1,6), xlab="groupe",
varwidth=T, col=lblue, main="examen")
abline(h=4, lty=2)
# Séparation des notes par groupe
note.A <- split(examen$note, examen$groupe)$A
note.B <- split(examen$note, examen$groupe)$B
# Affichage des boîtes à moustaches
lblue <- "#528B8B"
par(pty="s")
boxplot(note~groupe, data=examen, ylim=c(1,6), xlab="groupe",
varwidth=T, col=lblue, main="examen")
abline(h=4, lty=2)
# Ajout des bâtonnets pour le groupe A
rug(note.A, side=2)
# Ajout des bâtonnets pour le groupe B
rug(note.B, side=4)
result <- by(examen$note, examen$groupe, sd)
print(paste("Ecart type groupe A:", round(result['A'], 3)))
print(paste("Ecart type groupe B:", round(result['B'], 3)))
library(arules)
library(ggplot2)
data("AdultUCI")
dframe<-AdultUCI[, c("education", "hours-per-week")]
colnames(dframe)<-c("education", "hours_per_week")
str(dframe)
ggplot(dframe, aes(x=hours_per_week, y=education)) +
geom_point(colour="lightblue", alpha=0.1, position="jitter") +
geom_boxplot(outlier.size=0, alpha=0.2)
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
cpus <- scan("data/cpus.txt")
examen <- read.table("data/examen.txt", header = TRUE)
cpus
examen
cpus[12]
cpus[3:19]
cpus[cpus>190]
examen$note
examen$note[7]
mesdonnees<-c(2.9, 3.4, 3.4, 3.7, 3.7, 2.8, 2.1, 2.5, 2.6)
mesdonnees
couleurs<-c("bleu", "vert", "blanc", "noir", "jaune")
couleurs
mesdonnees[-c(3:5)]
ls()
stem(cpus)
par(mfrow=c(1,2), pty="s")
hist(cpus, xlab="performance relative", ylab="fréquence", main="",
col="darkslategray4")
boxplot(cpus, xlab="performance relative", col="darkslategray4", horizontal=T)
rug(cpus)
par(mfrow=c(1,1))
# Calcul de la médiane
performance_mediane <- median(cpus)
print(paste("Performance relative médiane:", performance_mediane))
# Calcul de la moyenne
performance_moyenne <- mean(cpus)
print(paste("Performance relative moyenne:", performance_moyenne))
n.cpus<-table(cpus)
as.numeric(names(n.cpus)[n.cpus==max(n.cpus)])
summary(cpus)
ecart_type_complet <- sd(cpus)
print(paste("Ecart type complet:", ecart_type_complet))
bp_stats <- boxplot(cpus, plot=FALSE)
atypiques <- bp_stats$out
print("Valeurs atypiques:")
atypiques
cpus_sans_atypiques <- cpus[!cpus %in% atypiques]
print(paste("Ecart type sans valeurs atypiques:", sd(cpus_sans_atypiques)))
lblue<-"#528B8B"
par(pty="s")
boxplot(note~groupe, data=examen, ylim=c(1,6), xlab="groupe",
varwidth=T, col=lblue, main="examen")
abline(h=4, lty=2)
# Séparation des notes par groupe
note.A <- split(examen$note, examen$groupe)$A
note.B <- split(examen$note, examen$groupe)$B
# Affichage des boîtes à moustaches
lblue <- "#528B8B"
par(pty="s")
boxplot(note~groupe, data=examen, ylim=c(1,6), xlab="groupe",
varwidth=T, col=lblue, main="examen")
abline(h=4, lty=2)
# Ajout des bâtonnets pour le groupe A
rug(note.A, side=2)
# Ajout des bâtonnets pour le groupe B
rug(note.B, side=4)
result <- by(examen$note, examen$groupe, sd)
print(paste("Ecart type groupe A:", round(result['A'], 3)))
print(paste("Ecart type groupe B:", round(result['B'], 3)))
library(arules)
library(ggplot2)
data("AdultUCI")
dframe<-AdultUCI[, c("education", "hours-per-week")]
colnames(dframe)<-c("education", "hours_per_week")
str(dframe)
ggplot(dframe, aes(x=hours_per_week, y=education)) +
geom_point(colour="lightblue", alpha=0.1, position="jitter") +
geom_boxplot(outlier.size=0, alpha=0.2)
dim(AdultUCI)
nrows<-nrow(AdultUCI)
n.missing<-rowSums(is.na(AdultUCI))
sum(n.missing>0)/nrows
nx<-by(dframe$hours_per_week, dframe$education, max, na.rm=T)
nx
max(nx)
names(nx)[nx==max(nx)]
cpus <- scan("data/cpus.txt")
examen <- read.table("data/examen.txt", header = TRUE)
cpus
examen
cpus[12]
cpus[3:19]
cpus[cpus>190]
examen$note
examen$note[7]
mesdonnees<-c(2.9, 3.4, 3.4, 3.7, 3.7, 2.8, 2.1, 2.5, 2.6)
mesdonnees
couleurs<-c("bleu", "vert", "blanc", "noir", "jaune")
couleurs
mesdonnees[-c(3:5)]
ls()
stem(cpus)
par(mfrow=c(1,2), pty="s")
hist(cpus, xlab="performance relative", ylab="fréquence", main="",
col="darkslategray4")
boxplot(cpus, xlab="performance relative", col="darkslategray4", horizontal=T)
rug(cpus)
par(mfrow=c(1,1))
# Calcul de la médiane
performance_mediane <- median(cpus)
print(paste("Performance relative médiane:", performance_mediane))
# Calcul de la moyenne
performance_moyenne <- mean(cpus)
print(paste("Performance relative moyenne:", performance_moyenne))
n.cpus<-table(cpus)
as.numeric(names(n.cpus)[n.cpus==max(n.cpus)])
summary(cpus)
ecart_type_complet <- sd(cpus)
print(paste("Ecart type complet:", ecart_type_complet))
bp_stats <- boxplot(cpus, plot=FALSE)
atypiques <- bp_stats$out
print("Valeurs atypiques:")
atypiques
cpus_sans_atypiques <- cpus[!cpus %in% atypiques]
print(paste("Ecart type sans valeurs atypiques:", sd(cpus_sans_atypiques)))
lblue<-"#528B8B"
par(pty="s")
boxplot(note~groupe, data=examen, ylim=c(1,6), xlab="groupe",
varwidth=T, col=lblue, main="examen")
abline(h=4, lty=2)
# Séparation des notes par groupe
note.A <- split(examen$note, examen$groupe)$A
note.B <- split(examen$note, examen$groupe)$B
# Affichage des boîtes à moustaches
lblue <- "#528B8B"
par(pty="s")
boxplot(note~groupe, data=examen, ylim=c(1,6), xlab="groupe",
varwidth=T, col=lblue, main="examen")
abline(h=4, lty=2)
# Ajout des bâtonnets pour le groupe A
rug(note.A, side=2)
# Ajout des bâtonnets pour le groupe B
rug(note.B, side=4)
result <- by(examen$note, examen$groupe, sd)
print(paste("Ecart type groupe A:", round(result['A'], 3)))
print(paste("Ecart type groupe B:", round(result['B'], 3)))
#| warning: false
#| echo: false
#| message: false
library(arules)
library(ggplot2)
data("AdultUCI")
dframe<-AdultUCI[, c("education", "hours-per-week")]
colnames(dframe)<-c("education", "hours_per_week")
str(dframe)
ggplot(dframe, aes(x=hours_per_week, y=education)) +
geom_point(colour="lightblue", alpha=0.1, position="jitter") +
geom_boxplot(outlier.size=0, alpha=0.2)
dim(AdultUCI)
nrows<-nrow(AdultUCI)
n.missing<-rowSums(is.na(AdultUCI))
sum(n.missing>0)/nrows
nx<-by(dframe$hours_per_week, dframe$education, max, na.rm=T)
nx
max(nx)
names(nx)[nx==max(nx)]
# Calculer l'écart-type pour chaque niveau d'éducation
std_devs <- by(dframe$hours_per_week, dframe$education, sd, na.rm=T)
# Afficher les écarts-types
print(std_devs)
# Trouver la formation avec le plus petit écart-type
min_std_dev <- min(std_devs, na.rm=T)
education_min_std_dev <- names(std_devs)[std_devs == min_std_dev]
print(paste("La formation avec le plus petit écart-type est:", education_min_std_dev, "avec un écart-type de:", round(min_std_dev, 3)))
# Calculer l'IQR pour chaque niveau d'éducation
iqr_values <- by(dframe$hours_per_week, dframe$education, IQR, na.rm=T)
# Afficher les valeurs de l'IQR
print(iqr_values)
# Trouver la formation avec le plus petit IQR
min_iqr <- min(iqr_values, na.rm=T)
education_min_iqr <- names(iqr_values)[iqr_values == min_iqr]
print(paste("La formation avec la plus petite étendue interquartile est:", education_min_iqr, "avec un IQR de:", round(min_iqr, 3)))
#| warning: false
#| echo: false
#| message: false
library(ggplot2)
library(dplyr)
# Filtrer le dataframe pour ne conserver que les formations "5th-6th" et "Assoc-voc"
subset_dframe <- dframe %>% filter(education %in% c("5th-6th", "Assoc-voc"))
# Créer le graphique
ggplot(subset_dframe, aes(x=hours_per_week, y=education)) +
geom_point(colour="lightblue", alpha=0.3, position="jitter") +
geom_boxplot(outlier.size=0, alpha=0.5)
#| warning: false
#| echo: false
#| message: false
library(ggplot2)
library(ggforce)
#| label: fig-iris
#| fig-cap: Graphique de nuage de points des iris
#| warning: false
#| message: false
pCol <- c('#057076', '#ff8301', '#bf5ccb')
plot.iris<-ggplot(iris, aes(x=Petal.Length, y=Petal.Width, col=Species)) +
scale_color_manual(values=pCol) +
scale_x_continuous(breaks=seq(0.5, 7.5, by=1), limits=c(0.5, 7.5)) +
scale_y_continuous(breaks=seq(-0.5, 3, by=0.5), limits=c(-0.5, 3)) +
labs(title="Edgar Anderson's Iris Data",
x="Petal Length",
y="Petal Width") +
theme(plot.title=element_text(size=12, hjust=.5),
axis.title=element_text(size=10, vjust=-2),
axis.text=element_text(size=10, vjust=-2)) +
geom_point(aes(color=Species), alpha=.6, size=3) +
theme_minimal()
plot.iris +
ggforce::geom_mark_ellipse(
aes(fill=Species, label=Species),
alpha=.15, show.legend=FALSE
)
correlation <- cor(iris$Petal.Length, iris$Petal.Width)
print(correlation)
library(ggplot2)
library(gridExtra)
# Boxplot horizontal avec rug
p1 <- ggplot(iris, aes(y=Species, x=Petal.Length, fill=Species)) +
geom_boxplot() +
geom_rug(sides="b") +
labs(title="Boxplot of Iris Petal Length", x="Petal Length [cm]") +
theme_minimal() +
theme(legend.position="none",
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
plot.margin=margin(5.5, 5.5, 5.5, 5.5, "pt")) +
scale_x_continuous(limits=c(0.5, 7.5))
# Diagramme de densité
p2 <- ggplot(iris, aes(x=Petal.Length, fill=Species)) +
geom_density(alpha=0.7) +
labs(title="Density Plot of Iris Petal Length", x="Petal Length [cm]", y="Density") +
theme_minimal() +
theme(legend.position="bottom",
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
plot.margin=margin(5.5, 5.5, 5.5, 5.5, "pt")) +
scale_x_continuous(limits=c(0.5, 7.5))
# Affichage des deux graphiques l'un au-dessus de l'autre
grid.arrange(p1, p2, ncol=1)
# Extraire la valeur max de la longueur des pétales de Setosa
setosa_max <- max(iris$Petal.Length[iris$Species == "setosa"])
# Extraire la valeur min de la longueur des pétales de Versicolor
versicolor_min <- min(iris$Petal.Length[iris$Species == "versicolor"])
# Calculer la valeur moyenne de l'écart
mean_value <- (setosa_max + versicolor_min) / 2
mean_value
reticulate::repl_python()
cpus <- scan("data/cpus.txt")
examen <- read.table("data/examen.txt", header = TRUE)
cpus
examen
cpus[12]
cpus[3:19]
cpus[cpus>190]
examen$note
examen$note[7]
mesdonnees<-c(2.9, 3.4, 3.4, 3.7, 3.7, 2.8, 2.1, 2.5, 2.6)
mesdonnees
couleurs<-c("bleu", "vert", "blanc", "noir", "jaune")
couleurs
mesdonnees[-c(3:5)]
ls()
stem(cpus)
par(mfrow=c(1,2), pty="s")
hist(cpus, xlab="performance relative", ylab="fréquence", main="",
col="darkslategray4")
boxplot(cpus, xlab="performance relative", col="darkslategray4", horizontal=T)
rug(cpus)
par(mfrow=c(1,1))
# Calcul de la médiane
performance_mediane <- median(cpus)
print(paste("Performance relative médiane:", performance_mediane))
# Calcul de la moyenne
performance_moyenne <- mean(cpus)
print(paste("Performance relative moyenne:", performance_moyenne))
n.cpus<-table(cpus)
as.numeric(names(n.cpus)[n.cpus==max(n.cpus)])
summary(cpus)
ecart_type_complet <- sd(cpus)
print(paste("Ecart type complet:", ecart_type_complet))
bp_stats <- boxplot(cpus, plot=FALSE)
atypiques <- bp_stats$out
print("Valeurs atypiques:")
atypiques
cpus_sans_atypiques <- cpus[!cpus %in% atypiques]
print(paste("Ecart type sans valeurs atypiques:", sd(cpus_sans_atypiques)))
lblue<-"#528B8B"
par(pty="s")
boxplot(note~groupe, data=examen, ylim=c(1,6), xlab="groupe",
varwidth=T, col=lblue, main="examen")
abline(h=4, lty=2)
# Séparation des notes par groupe
note.A <- split(examen$note, examen$groupe)$A
note.B <- split(examen$note, examen$groupe)$B
# Affichage des boîtes à moustaches
lblue <- "#528B8B"
par(pty="s")
boxplot(note~groupe, data=examen, ylim=c(1,6), xlab="groupe",
varwidth=T, col=lblue, main="examen")
abline(h=4, lty=2)
# Ajout des bâtonnets pour le groupe A
rug(note.A, side=2)
# Ajout des bâtonnets pour le groupe B
rug(note.B, side=4)
result <- by(examen$note, examen$groupe, sd)
print(paste("Ecart type groupe A:", round(result['A'], 3)))
print(paste("Ecart type groupe B:", round(result['B'], 3)))
#| warning: false
#| echo: false
#| message: false
library(arules)
library(ggplot2)
data("AdultUCI")
dframe<-AdultUCI[, c("education", "hours-per-week")]
colnames(dframe)<-c("education", "hours_per_week")
str(dframe)
ggplot(dframe, aes(x=hours_per_week, y=education)) +
geom_point(colour="lightblue", alpha=0.1, position="jitter") +
geom_boxplot(outlier.size=0, alpha=0.2)
dim(AdultUCI)
nrows<-nrow(AdultUCI)
n.missing<-rowSums(is.na(AdultUCI))
sum(n.missing>0)/nrows
nx<-by(dframe$hours_per_week, dframe$education, max, na.rm=T)
nx
max(nx)
names(nx)[nx==max(nx)]
# Calculer l'écart-type pour chaque niveau d'éducation
std_devs <- by(dframe$hours_per_week, dframe$education, sd, na.rm=T)
# Afficher les écarts-types
print(std_devs)
# Trouver la formation avec le plus petit écart-type
min_std_dev <- min(std_devs, na.rm=T)
education_min_std_dev <- names(std_devs)[std_devs == min_std_dev]
print(paste("La formation avec le plus petit écart-type est:", education_min_std_dev, "avec un écart-type de:", round(min_std_dev, 3)))
# Calculer l'IQR pour chaque niveau d'éducation
iqr_values <- by(dframe$hours_per_week, dframe$education, IQR, na.rm=T)
# Afficher les valeurs de l'IQR
print(iqr_values)
# Trouver la formation avec le plus petit IQR
min_iqr <- min(iqr_values, na.rm=T)
education_min_iqr <- names(iqr_values)[iqr_values == min_iqr]
print(paste("La formation avec la plus petite étendue interquartile est:", education_min_iqr, "avec un IQR de:", round(min_iqr, 3)))
#| warning: false
#| echo: false
#| message: false
library(ggplot2)
library(dplyr)
# Filtrer le dataframe pour ne conserver que les formations "5th-6th" et "Assoc-voc"
subset_dframe <- dframe %>% filter(education %in% c("5th-6th", "Assoc-voc"))
# Créer le graphique
ggplot(subset_dframe, aes(x=hours_per_week, y=education)) +
geom_point(colour="lightblue", alpha=0.3, position="jitter") +
geom_boxplot(outlier.size=0, alpha=0.5)
#| warning: false
#| echo: false
#| message: false
library(ggplot2)
library(ggforce)
#| label: fig-iris
#| fig-cap: Graphique de nuage de points des iris
#| warning: false
#| message: false
pCol <- c('#057076', '#ff8301', '#bf5ccb')
plot.iris<-ggplot(iris, aes(x=Petal.Length, y=Petal.Width, col=Species)) +
scale_color_manual(values=pCol) +
scale_x_continuous(breaks=seq(0.5, 7.5, by=1), limits=c(0.5, 7.5)) +
scale_y_continuous(breaks=seq(-0.5, 3, by=0.5), limits=c(-0.5, 3)) +
labs(title="Edgar Anderson's Iris Data",
x="Petal Length",
y="Petal Width") +
theme(plot.title=element_text(size=12, hjust=.5),
axis.title=element_text(size=10, vjust=-2),
axis.text=element_text(size=10, vjust=-2)) +
geom_point(aes(color=Species), alpha=.6, size=3) +
theme_minimal()
plot.iris +
ggforce::geom_mark_ellipse(
aes(fill=Species, label=Species),
alpha=.15, show.legend=FALSE
)
correlation <- cor(iris$Petal.Length, iris$Petal.Width)
print(correlation)
library(ggplot2)
library(gridExtra)
# Boxplot horizontal avec rug
p1 <- ggplot(iris, aes(y=Species, x=Petal.Length, fill=Species)) +
geom_boxplot() +
geom_rug(sides="b") +
labs(title="Boxplot of Iris Petal Length", x="Petal Length [cm]") +
theme_minimal() +
theme(legend.position="none",
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
plot.margin=margin(5.5, 5.5, 5.5, 5.5, "pt")) +
scale_x_continuous(limits=c(0.5, 7.5))
# Diagramme de densité
p2 <- ggplot(iris, aes(x=Petal.Length, fill=Species)) +
geom_density(alpha=0.7) +
labs(title="Density Plot of Iris Petal Length", x="Petal Length [cm]", y="Density") +
theme_minimal() +
theme(legend.position="bottom",
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
plot.margin=margin(5.5, 5.5, 5.5, 5.5, "pt")) +
scale_x_continuous(limits=c(0.5, 7.5))
# Affichage des deux graphiques l'un au-dessus de l'autre
grid.arrange(p1, p2, ncol=1)
# Extraire la valeur max de la longueur des pétales de Setosa
setosa_max <- max(iris$Petal.Length[iris$Species == "setosa"])
# Extraire la valeur min de la longueur des pétales de Versicolor
versicolor_min <- min(iris$Petal.Length[iris$Species == "versicolor"])
# Calculer la valeur moyenne de l'écart
mean_value <- (setosa_max + versicolor_min) / 2
mean_value
reticulate::repl_python()
